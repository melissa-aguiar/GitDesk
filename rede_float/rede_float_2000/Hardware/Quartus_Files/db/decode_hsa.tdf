--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone 10 LP" LPM_DECODES=5 LPM_WIDTH=3 data enable eq
--VERSION_BEGIN 19.1 cbx_cycloneii 2019:09:22:11:00:28:SJ cbx_lpm_add_sub 2019:09:22:11:00:28:SJ cbx_lpm_compare 2019:09:22:11:00:28:SJ cbx_lpm_decode 2019:09:22:11:00:28:SJ cbx_mgl 2019:09:22:11:02:15:SJ cbx_nadder 2019:09:22:11:00:28:SJ cbx_stratix 2019:09:22:11:00:28:SJ cbx_stratixii 2019:09:22:11:00:28:SJ  VERSION_END


-- Copyright (C) 2019  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 8 
SUBDESIGN decode_hsa
( 
	data[2..0]	:	input;
	enable	:	input;
	eq[4..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[4..0]	: WIRE;
	eq_wire[7..0]	: WIRE;
	w_anode1167w[3..0]	: WIRE;
	w_anode1184w[3..0]	: WIRE;
	w_anode1194w[3..0]	: WIRE;
	w_anode1204w[3..0]	: WIRE;
	w_anode1214w[3..0]	: WIRE;
	w_anode1224w[3..0]	: WIRE;
	w_anode1234w[3..0]	: WIRE;
	w_anode1244w[3..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[4..0] = eq_wire[4..0];
	eq_wire[] = ( w_anode1244w[3..3], w_anode1234w[3..3], w_anode1224w[3..3], w_anode1214w[3..3], w_anode1204w[3..3], w_anode1194w[3..3], w_anode1184w[3..3], w_anode1167w[3..3]);
	w_anode1167w[] = ( (w_anode1167w[2..2] & (! data_wire[2..2])), (w_anode1167w[1..1] & (! data_wire[1..1])), (w_anode1167w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode1184w[] = ( (w_anode1184w[2..2] & (! data_wire[2..2])), (w_anode1184w[1..1] & (! data_wire[1..1])), (w_anode1184w[0..0] & data_wire[0..0]), enable_wire);
	w_anode1194w[] = ( (w_anode1194w[2..2] & (! data_wire[2..2])), (w_anode1194w[1..1] & data_wire[1..1]), (w_anode1194w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode1204w[] = ( (w_anode1204w[2..2] & (! data_wire[2..2])), (w_anode1204w[1..1] & data_wire[1..1]), (w_anode1204w[0..0] & data_wire[0..0]), enable_wire);
	w_anode1214w[] = ( (w_anode1214w[2..2] & data_wire[2..2]), (w_anode1214w[1..1] & (! data_wire[1..1])), (w_anode1214w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode1224w[] = ( (w_anode1224w[2..2] & data_wire[2..2]), (w_anode1224w[1..1] & (! data_wire[1..1])), (w_anode1224w[0..0] & data_wire[0..0]), enable_wire);
	w_anode1234w[] = ( (w_anode1234w[2..2] & data_wire[2..2]), (w_anode1234w[1..1] & data_wire[1..1]), (w_anode1234w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode1244w[] = ( (w_anode1244w[2..2] & data_wire[2..2]), (w_anode1244w[1..1] & data_wire[1..1]), (w_anode1244w[0..0] & data_wire[0..0]), enable_wire);
END;
--VALID FILE
